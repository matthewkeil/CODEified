/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface BoardOfTrusteesInterface extends ethers.utils.Interface {
  functions: {
    "censureTrustee(address)": FunctionFragment;
    "changeRequiredApprovals(uint32)": FunctionFragment;
    "nominateTrustee(address)": FunctionFragment;
    "numberOfTrustees()": FunctionFragment;
    "requiredAppovalUpdates(uint32)": FunctionFragment;
    "requiredApprovals()": FunctionFragment;
    "submissions(address)": FunctionFragment;
    "trusteeList(uint256)": FunctionFragment;
    "trustees(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "censureTrustee",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeRequiredApprovals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nominateTrustee",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfTrustees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requiredAppovalUpdates",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requiredApprovals",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "submissions", values: [string]): string;
  encodeFunctionData(
    functionFragment: "trusteeList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "trustees", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "censureTrustee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeRequiredApprovals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nominateTrustee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberOfTrustees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requiredAppovalUpdates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requiredApprovals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trusteeList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "trustees", data: BytesLike): Result;

  events: {
    "AddedTrustee(address)": EventFragment;
    "RemovedTrustee(address)": EventFragment;
    "RequiredApprovalsChangeRequest(uint256,address,uint256)": EventFragment;
    "RequiredApprovalsChanged(uint32)": EventFragment;
    "TrusteeDiscommended(address,address,uint256)": EventFragment;
    "TrusteeRecomended(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddedTrustee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemovedTrustee"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RequiredApprovalsChangeRequest"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequiredApprovalsChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TrusteeDiscommended"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TrusteeRecomended"): EventFragment;
}

export type AddedTrusteeEvent = TypedEvent<[string] & { trustee: string }>;

export type RemovedTrusteeEvent = TypedEvent<[string] & { trustee: string }>;

export type RequiredApprovalsChangeRequestEvent = TypedEvent<
  [BigNumber, string, BigNumber] & {
    numberOfApprovals: BigNumber;
    requester: string;
    totalRequests: BigNumber;
  }
>;

export type RequiredApprovalsChangedEvent = TypedEvent<
  [number] & { requiredApprovals: number }
>;

export type TrusteeDiscommendedEvent = TypedEvent<
  [string, string, BigNumber] & {
    nominee: string;
    nominator: string;
    nominations: BigNumber;
  }
>;

export type TrusteeRecomendedEvent = TypedEvent<
  [string, string, BigNumber] & {
    nominee: string;
    nominator: string;
    nominations: BigNumber;
  }
>;

export class BoardOfTrustees extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BoardOfTrusteesInterface;

  functions: {
    censureTrustee(
      _trustee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeRequiredApprovals(
      _numberOfApprovals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nominateTrustee(
      _nominee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    numberOfTrustees(overrides?: CallOverrides): Promise<[number]>;

    requiredAppovalUpdates(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number] & { submissionType: number }>;

    requiredApprovals(overrides?: CallOverrides): Promise<[number]>;

    submissions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[number] & { submissionType: number }>;

    trusteeList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    trustees(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, BigNumber] & {
        isTrustee: boolean;
        name: string;
        ratified: BigNumber;
      }
    >;
  };

  censureTrustee(
    _trustee: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeRequiredApprovals(
    _numberOfApprovals: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nominateTrustee(
    _nominee: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  numberOfTrustees(overrides?: CallOverrides): Promise<number>;

  requiredAppovalUpdates(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  requiredApprovals(overrides?: CallOverrides): Promise<number>;

  submissions(arg0: string, overrides?: CallOverrides): Promise<number>;

  trusteeList(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  trustees(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [boolean, string, BigNumber] & {
      isTrustee: boolean;
      name: string;
      ratified: BigNumber;
    }
  >;

  callStatic: {
    censureTrustee(_trustee: string, overrides?: CallOverrides): Promise<void>;

    changeRequiredApprovals(
      _numberOfApprovals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    nominateTrustee(_nominee: string, overrides?: CallOverrides): Promise<void>;

    numberOfTrustees(overrides?: CallOverrides): Promise<number>;

    requiredAppovalUpdates(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    requiredApprovals(overrides?: CallOverrides): Promise<number>;

    submissions(arg0: string, overrides?: CallOverrides): Promise<number>;

    trusteeList(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    trustees(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, BigNumber] & {
        isTrustee: boolean;
        name: string;
        ratified: BigNumber;
      }
    >;
  };

  filters: {
    "AddedTrustee(address)"(
      trustee?: string | null
    ): TypedEventFilter<[string], { trustee: string }>;

    AddedTrustee(
      trustee?: string | null
    ): TypedEventFilter<[string], { trustee: string }>;

    "RemovedTrustee(address)"(
      trustee?: string | null
    ): TypedEventFilter<[string], { trustee: string }>;

    RemovedTrustee(
      trustee?: string | null
    ): TypedEventFilter<[string], { trustee: string }>;

    "RequiredApprovalsChangeRequest(uint256,address,uint256)"(
      numberOfApprovals?: BigNumberish | null,
      requester?: string | null,
      totalRequests?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      {
        numberOfApprovals: BigNumber;
        requester: string;
        totalRequests: BigNumber;
      }
    >;

    RequiredApprovalsChangeRequest(
      numberOfApprovals?: BigNumberish | null,
      requester?: string | null,
      totalRequests?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      {
        numberOfApprovals: BigNumber;
        requester: string;
        totalRequests: BigNumber;
      }
    >;

    "RequiredApprovalsChanged(uint32)"(
      requiredApprovals?: BigNumberish | null
    ): TypedEventFilter<[number], { requiredApprovals: number }>;

    RequiredApprovalsChanged(
      requiredApprovals?: BigNumberish | null
    ): TypedEventFilter<[number], { requiredApprovals: number }>;

    "TrusteeDiscommended(address,address,uint256)"(
      nominee?: string | null,
      nominator?: string | null,
      nominations?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { nominee: string; nominator: string; nominations: BigNumber }
    >;

    TrusteeDiscommended(
      nominee?: string | null,
      nominator?: string | null,
      nominations?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { nominee: string; nominator: string; nominations: BigNumber }
    >;

    "TrusteeRecomended(address,address,uint256)"(
      nominee?: string | null,
      nominator?: string | null,
      nominations?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { nominee: string; nominator: string; nominations: BigNumber }
    >;

    TrusteeRecomended(
      nominee?: string | null,
      nominator?: string | null,
      nominations?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { nominee: string; nominator: string; nominations: BigNumber }
    >;
  };

  estimateGas: {
    censureTrustee(
      _trustee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeRequiredApprovals(
      _numberOfApprovals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nominateTrustee(
      _nominee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    numberOfTrustees(overrides?: CallOverrides): Promise<BigNumber>;

    requiredAppovalUpdates(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requiredApprovals(overrides?: CallOverrides): Promise<BigNumber>;

    submissions(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    trusteeList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    trustees(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    censureTrustee(
      _trustee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeRequiredApprovals(
      _numberOfApprovals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nominateTrustee(
      _nominee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    numberOfTrustees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    requiredAppovalUpdates(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requiredApprovals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    submissions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    trusteeList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    trustees(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
